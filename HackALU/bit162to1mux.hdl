CHIP bit162to1mux
{IN X[16],Y[16],S0;
 //if s0=1 outputs Y else outputs X
 OUT Z[16];
 PARTS:
 Not(in=S0,out=notS0);
 And(a=notS0,b=X[15],out=part151);
 And(a=notS0,b=X[14],out=part141);
 And(a=notS0,b=X[13],out=part131);
 And(a=notS0,b=X[12],out=part121);
 And(a=notS0,b=X[11],out=part111);
 And(a=notS0,b=X[10],out=part101);
 And(a=notS0,b=X[9],out=part91);
 And(a=notS0,b=X[8],out=part81);
 And(a=notS0,b=X[7],out=part71);
 And(a=notS0,b=X[6],out=part61);
 And(a=notS0,b=X[5],out=part51);
 And(a=notS0,b=X[4],out=part41);
 And(a=notS0,b=X[3],out=part31);
 And(a=notS0,b=X[2],out=part21);
 And(a=notS0,b=X[1],out=part11);
 And(a=notS0,b=X[0],out=part01);
 And(a=S0,b=Y[15],out=part152);
 And(a=S0,b=Y[14],out=part142);
 And(a=S0,b=Y[13],out=part132);
 And(a=S0,b=Y[12],out=part122);
 And(a=S0,b=Y[11],out=part112);
 And(a=S0,b=Y[10],out=part102);
 And(a=S0,b=Y[9],out=part92);
 And(a=S0,b=Y[8],out=part82);
 And(a=S0,b=Y[7],out=part72);
 And(a=S0,b=Y[6],out=part62);
 And(a=S0,b=Y[5],out=part52);
 And(a=S0,b=Y[4],out=part42);
 And(a=S0,b=Y[3],out=part32);
 And(a=S0,b=Y[2],out=part22);
 And(a=S0,b=Y[1],out=part12);
 And(a=S0,b=Y[0],out=part02);
 Or(a=part151,b=part152,out=Z[15]);
 Or(a=part141,b=part142,out=Z[14]);
 Or(a=part131,b=part132,out=Z[13]);
 Or(a=part121,b=part122,out=Z[12]);
 Or(a=part111,b=part112,out=Z[11]);
 Or(a=part101,b=part102,out=Z[10]);
 Or(a=part91,b=part92,out=Z[9]);
 Or(a=part81,b=part82,out=Z[8]);
 Or(a=part71,b=part72,out=Z[7]);
 Or(a=part61,b=part62,out=Z[6]);
 Or(a=part51,b=part52,out=Z[5]);
 Or(a=part41,b=part42,out=Z[4]);
 Or(a=part31,b=part32,out=Z[3]);
 Or(a=part21,b=part22,out=Z[2]);
 Or(a=part11,b=part12,out=Z[1]);
 Or(a=part01,b=part02,out=Z[0]);
}
